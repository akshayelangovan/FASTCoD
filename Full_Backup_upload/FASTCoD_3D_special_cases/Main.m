% Copyright 2021-2023, University of Cincinnati
% All rights reserved. See LICENSE file at:
% https://github.com/akshayelangovan/FASTCoD
% Additional copyright may be held by others, as reflected in the commit history.
%% Code for waypoint following demonstrations
% Author : Akshay Elangovan

clc
close all
clear

%% Defining system specifications
S.M = 2; % Mass of quadrotor
S.m = 1; % Mass of payload
S.l = 1; % Length of rigid cable
S.J = 0.17; % Moment of inertia of quadrotor

S.g = 9.81; % acceleration due to gravity

S.hover_F = (S.M+S.m)*S.g; % Maximum thrust generated by quadrotor
S.max_tau = 10; % Maximum torque by quadrotor

S.max_pos_error = 3; % Max position error that is expected
S.max_vel_error = 3; % Max velocity error that is expected
S.max_vel_roll = 3; % Max roll velocity (angular) that is permitted

S.safe_distance = 2;

[Y3,Z3] = meshgrid(-3:1:7);
points3 = [Y3(:),Z3(:)];
X3 = ones(size(points3,1),1)*3;

[Y10,Z10] = meshgrid(-10:1:10);
points10 = [Y10(:),Z10(:)];
X10 = ones(size(points10,1),1)*3;


% Obstacle List
S.world = [...
    %-X3, points3(:,1), points3(:,2); % -X wall
    %X3*10/3, points3(:,1), points3(:,2); % +X wall
    points3(:,1), points3(:,2), -X3]; % -Z wall
%     points3(:,1), points3(:,2), X3;
%     points3(:,1), -X3, points3(:,2)
%     points3(:,1), X3, points3(:,2)];


% Waypoint List
S.waypoints = [...
    1 0 0;
    1 3 0;
    1 3 3;
    1 0 3;
    -2 0 3;
    -2 0 0];
    
% Initial Condition List
i3 = 2/sqrt(3);
P.initstate = [...
    -3 0 0 pi/4 0 0 0 0 2 0 0 0 0 0 0 0;
    -2 0 0 0.0001 0 0 0 0 0 0 0 0 0 0 0 0;
    0 0 0 0.0001 0 0 0 0 0 0 0 0 0 0 0 0;
    2 0 0 0.0001 0 0 0 0 0 0 0 0 0 0 0 0;
    1 0 0 pi/4 0 0 0 0 0 0 0 0 0 0 0 0];
    
disp('Enter 1 for waypoint to stabilization')
disp('Enter 2 for waypoint to waypoint to waypoint')
disp('Enter 3 for waypoint to waypoint to stabilization')
disp('Enter 4 for moving waypoint demo')
disp('Enter 5 for moving circular xy path demo')
S.waypointcase = input("Type 1,2,3,4 or 5:");
switch S.waypointcase
    case 1
        P.ode = @myodefun1; % function containing system equations for odesolver
        P.T = 7.9; % duration of animation  in seconds
    case 2
        P.ode = @myodefun2;
        P.T = 46; % duration of animation  in seconds
    case 3
        P.ode = @myodefun2;
        P.T = 15; % duration of animation  in seconds
    case 4
        P.T = 12; % duration of animation  in seconds
        P.ode = @myodefun3;
    case 5
        P.T = 15; % duration of animation  in seconds
        P.ode = @myodefun4; % Only path following / No switching
end

fis1 = readfis('fisx_7x5'); % FIS files being tuned
fis2 = readfis('fisroll_7x5');
fis3 = readfis('fisz_noninverted_7x5');
fis4 = readfis('fisx_7x5'); % FIS files being tuned
fis5 = readfis('fisroll_7x5');
fis6 = readfis('fisyaw_7x5');
fis7 = readfis('OAFIS5');

fis8 = readfis('fisx_7x5'); % FIS files being tuned
fis9 = readfis('fisroll_7x5');
fis10 = readfis('fisz_noninverted_7x5');
fis11 = readfis('fisx_7x5'); % FIS files being tuned
fis12 = readfis('fisroll_7x5');

tic

load('M9aaslow1.mat');
R0 = BestChrom.Gene;
load('M9iislow.mat') 
R1 = BestChrom.Gene;
load('Y1.mat');% Trained controller chromosome + fitness || Y1 - yaw control in XY
R2 = BestChrom.Gene;

load('C3.mat') 
R3 = BestChrom.Gene;
load('C4i.mat') 
R4 = BestChrom.Gene;


for i = 1 : 35
    fis1.rule(i).consequent = R0(i);
    fis2.rule(i).consequent = R0(i + (35));
    fis3.rule(i).consequent = R0(i + 2*(35));
    fis4.rule(i).consequent = R1(i); % Assigning rules
    fis5.rule(i).consequent = R1(i + (35));
    fis6.rule(i).consequent = R2(i);
    
    fis8.rule(i).consequent = R3(i);
    fis9.rule(i).consequent = R3(i + (35));
    fis10.rule(i).consequent = R3(i + 2*(35));
    fis11.rule(i).consequent = R4(i); % Assigning rules
    fis12.rule(i).consequent = R4(i + (35));
end

toc

%% User interface
disp('Completed loading FISes. Running ode45 for simulation')

%% 

P.framespersec = 50;    
% P.T = 15; % duration of animation  in seconds
P.tspan=linspace(0,P.T,P.T*P.framespersec); % Generating time span


r = 0.5;

warning('off','all');

i = input('Enter initial state case (1 or 2):   ');
tic
X0 = P.initstate(i,:);

%% Simulating system

% X = all varaibles or statespace for our equations
options=odeset('abstol',1e-3,'reltol',1e-6);
[t,z]=ode45(@P.ode,P.tspan,X0,options,fis1,fis2,fis3,fis4,fis5,fis6,fis7,fis8,fis9,fis10,fis11,fis12,S);

xq = z(:,1);
yq = z(:,2);
zq = z(:,3);
aq = z(:,4);
bq = z(:,5);
phiq = z(:,6);
thetaq = z(:,7);
psiq = z(:,8);

xqdot = z(:,9);
yqdot = z(:,10);
zqdot = z(:,11);
aqdot = z(:,12);
bqdot = z(:,13);
phiqdot = z(:,14);
thetaqdot = z(:,15);
psiqdot = z(:,16);

t0 = [0;t(1:length(t)-1)];
dt = t-t0;

% Calculating Errors

x_goal = zeros(size(t));
y_goal = x_goal;
z_goal = x_goal;
distancetogoal = x_goal;
xe = zeros(size(t));
ye = xe;
ze = xe;
for i = 1:length(t)
    [x_goal(i),y_goal(i),z_goal(i)] = getsubwaypoint(S,t(i));
    xe(i) = x_goal(i) - xq(i);
    ye(i) = y_goal(i) - yq(i);
    ze(i) = z_goal(i) - zq(i);
    distancetogoal(i) = norm([xe(i),ye(i),ze(i)]);
end

toc

%% Animating
% To save video, uncomment 195-197, 237-240,249
% myVideo = VideoWriter('vid_waypoint_following_3_directions');
% myVideo.FrameRate = 50;
% open(myVideo)

figure()
% axis([-4 8 -4 4 -4 4])
axis([-4 4 -4 4 -4 4])
view(30,30)
% view([0,0])
% plot3(S.world(1:98,1),S.world(1:98,2),S.world(1:98,3),'*')
plot3(S.world(:,1),S.world(:,2),S.world(:,3),'+')
hold on
for i = 1:length(t)
%     axis([-4 8 -4 4 -4 4])
    axis([-4 4 -4 4 -4 4])
    view(30,30)
% view([0 0])
    % plot3([set of X vertices],[set of Y vertices],[set of Z vertices])
    [h1,h2] = drawquad(xq(i),yq(i),zq(i),phiq(i),thetaq(i),psiq(i),r);
    hold on
    [h3,h4] = drawrod(xq(i),yq(i),zq(i),S.l,aq(i),bq(i));
    hold on
    h5 = plot3(x_goal(i),y_goal(i),z_goal(i),"diamond",'MarkerFaceColor','blue','MarkerSize',5);
    hold on
    if norm([x_goal(i),y_goal(i),z_goal(i)] - [xq(i),yq(i),zq(i)])>0.4
        h6 = plot3(3,-3,3,"square",'MarkerFaceColor','red','MarkerSize',10);
        text(2.5,-3,3.05,'\leftarrow Waypoint Following')
    else
        h6 = plot3(3,-3,2,"square",'MarkerFaceColor','green','MarkerSize',10);
        text(2.5,-3,2.05,'\leftarrow Payload Stabilization')
    end
    hold on
    xlabel('x_w');
    ylabel('y_w');
    zlabel('z_w');
    pause(1/P.framespersec)
    hold on
%     if (i~=1)
%         frame = getframe(gcf);
%         writeVideo(myVideo, frame);
%     end
    if (i~=(length(xq)-1))
        delete(h1)
        delete(h2)
        delete(h3)
        delete(h4)
        delete(h5)
        delete(h6)
    end
end
% close(myVideo)

% fit = FitFun(z,t,S);
% disp('Fitness of the current run:')
% disp(fit)

%% Plots

% Plotting UAV Positions
figure()
plot(t,xq,t,yq,t,zq,t,x_goal,t,y_goal,t,z_goal)
legend('x_q','y_q','zq','x desired','y desired','z desired','Location','southeast')
title('UAV Position States vs Time')
xlabel('Time in seconds');
ylabel('x_q,y_q,z_q in meters');
ylim([min(xq)-0.5 max(xq)+1])

% Plot UAV Velocities
figure()
plot(t,xqdot,t,yqdot,t,zqdot)
legend('u_q','v_q','w_q')
xlabel('Time in seconds');
ylabel('u_q,v_q,w_q in meters/second');
title('UAV Velocity States vs Time')

% Plot UAV Path
figure();
plot3(xq, yq, zq);
xlabel('xq in meters');
ylabel('yq in meters');
zlabel('zq in meters');
title('UAV path');

% Plot Payload Cable Angle
figure()
plot(t,rad2deg(aq),t,zeros(size(t)))
% legend('\alpha_q')
title('Cable Angle vs Time')
xlabel('Time in seconds')
ylabel('\alpha in degrees')

% Plot error in distance

figure();
plot(t,norm([xe,ye,ze]))

% Plot path only
% waypoints = [...
%     -2 0 0;
%     1 0 0;
%     1 3 0;
%     1 3 3;
%     1 0 3;
%     -2 0 3;
%     -2 0 0];
% myVideo = VideoWriter('pathplots_only_waypoint_following_3_directions');
% myVideo.FrameRate = 50;
% open(myVideo)
% 
figure()
axis([-3 2 -1 4 -2 4])
view(30,30)
plot3(S.world(:,1),S.world(:,2),S.world(:,3),'+','HandleVisibility','off')
hold on
h3 = plot3(S.waypoints(:,1),S.waypoints(:,2),S.waypoints(:,3),'m*','HandleVisibility','off');
hold on
axis([-3 2 -1 4 -2 4])
hold on
for i = 1:length(t)
    axis([-3 2 -1 4 -2 4])
    view(30,30)
    plot3(xq(i),yq(i),zq(i),'.b');
    hold on
    plot3(xq(i)+S.l*cos(bq(i))*sin(aq(i)),yq(i)+S.l*sin(bq(i))*sin(aq(i)),zq(i)-S.l*cos(aq(i)),'.r');
    hold on
    xlabel('x_w');
    ylabel('y_w');
    zlabel('z_w');
    pause(1/P.framespersec)
    hold on
%     if (i~=1)
%         frame = getframe(gcf);
%         writeVideo(myVideo, frame);
%     end
end
% close(myVideo)

% % Plot force inputs
F = zeros(1,length(t));
tau_pitch = F;
tau_roll = F;
tau_yaw = F;
% 
% for i=1:length(xq)
%     [x_g,y_g,z_g] = getsubwaypoint(S,t(i));
% psie = yaw_goal - psi;
% psie=0;

% if norm([x_goal,y_goal,z_goal]-[x,y,z])>0.4
%     xe = x_g - xq(i); % calculating x_error
%     ye = y_g - yq(i); % calculating y_error
%     ze = z_g - zq(i); % calculating z_error
%     [F(i),tau_pitch(i),tau_roll(i),tau_yaw(i)] = getF(xe,xqdot(i),ye,yqdot(i),ze,zqdot(i),phiq(i),phiqdot(i),thetaq(i),thetaqdot(i),psiq(i),psiqdot(i),fis1,fis2,fis3,fis4,fis5,fis6,S);
%     obs = sensenearest(xq(i),yq(i),zq(i),S);
%     [x_goal, y_goal, z_goal, yaw_goal] = oafis(obs,xq(i),yq(i),zq(i),fis7);
%     xe = x_goal; % calculating x_error
%     ye = y_goal; % calculating y_error
%     ze = z_goal; % calculating z_error
%     psie = yaw_goal - psiq(i);
%     
%     if norm(obs-[xq(i),yq(i),zq(i)])<S.safe_distance
%         [f,t_theta,t_phi,t_psi] = getF(xe,xqdot(i),ye,yqdot(i),ze,zqdot(i),thetaq(i),thetaqdot(i),phiq(i),phiqdot(i),psie,psiqdot(i),fis1,fis2,fis3,fis4,fis5,fis6,S);
%     else
%         [f,t_theta,t_phi,t_psi] = getF(xe,xqdot(i),ye,yqdot(i),ze,zqdot(i),thetaq(i),thetaqdot(i),phiq(i),phiqdot(i),psie,psiqdot(i),fis8,fis9,fis10,fis11,fis12,fis6,S);
%     end
%     F(i) = f;
%     tau_pitch(i) = t_theta;
%     tau_roll(i) = t_phi;
%     tau_yaw(i) = t_psi;
% end

% figure()
% plot(t,F)
% xlabel('time (s)')
% ylabel('Total Thrust (N)')
% 
% figure()
% plot(t,tau_pitch)
% xlabel('time (s)')
% ylabel('Pitch Torque (Nm)')

 %% End       